<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\JobVacanciesController;
use App\Http\Controllers\JobApplicationsController;
use App\Http\Controllers\JobComments;
use App\Http\Controllers\FavoriteController;
use App\Http\Controllers\UserController;

// Auth routes
Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);
Route::get('/stats', [\App\Http\Controllers\StatsController::class, 'index']);

// Public vacancies
Route::get('/vacancies', [JobVacanciesController::class, 'index']);
Route::get('/vacancies/{id}', [JobVacanciesController::class, 'show']); // single vacancy
Route::middleware(['auth:sanctum', 'admin'])->group(function () {
    Route::get('/admin/dashboard', [AdminController::class, 'dashboard']);
});

Route::middleware('auth:sanctum')->group(function () {
    Route::get('/profile', [UserController::class, 'profile']);
    Route::put('/profile', [UserController::class, 'updateProfile']);
});

// Protected routes
Route::middleware('auth:sanctum')->group(function () {
    Route::get('/user', fn (Request $request) => $request->user());
    Route::get('/profile', [AuthController::class, 'profile']);
    Route::post('/logout', [AuthController::class, 'logout']);
     Route::post('/favorites/toggle/{vacancyId}', [FavoriteController::class, 'toggle']);
    Route::get('/favorites', [FavoriteController::class, 'index']);
    // Vacancy CRUD
    Route::post('/vacancies', [JobVacanciesController::class, 'store']);
    Route::delete('/vacancies/{id}', [JobVacanciesController::class, 'destroy']);
    Route::post('/vacancies/{id}/apply', [JobApplicationsController::class, 'apply']);
    Route::get('/applications', [JobApplicationsController::class, 'employerApplications']);
    Route::get('/applications/{id}/cv/view', [JobApplicationsController::class, 'viewCv']);
    Route::middleware('auth:sanctum')->get('/applications/{id}/cv-link', [JobApplicationsController::class, 'getCvLink']);
    Route::post('/comments', [JobComments::class, 'store']);
    Route::get('/vacancies/{id}/comments', [JobComments::class, 'index']);
    // File upload
    Route::post('/upload', [JobVacanciesController::class, 'upload']);
});


Route::post('/assistant', function (Request $request) {
    $userMessage = $request->input('message', '');

    if (trim($userMessage) === '') {
        return response()->json(['reply' => '‚ö†Ô∏è Zi≈Üojums ir tuk≈°s.'], 400);
    }

    // üß† Define MetaGoon's role and limits
    $systemPrompt = "
        You are MetaGoon Assistant ‚Äî the built-in virtual helper for the MetaGoon website.

        Your only purpose is to assist users with the MetaGoon job platform.  
        You must stay 100% focused on explaining, guiding, and supporting all features, functions, and actions available on the MetaGoon site.

        Never answer anything unrelated to the website, job searching, or platform usage.

        ---

        ### üè¢ What MetaGoon Is
        MetaGoon is a modern web platform that connects job seekers with employers in Latvia.  
        It allows users to search for jobs, apply, communicate, and manage profiles ‚Äî all in one place.  
        Employers can post jobs, review candidates, and interact with users through comments and messages.

        ---

        ### üë• User Roles

        1. **Guest (Unregistered User):**
        - Can browse job listings and view details.
        - Cannot comment, apply, or post jobs.
        - Can register or log in to gain access to full features.

        2. **Registered Job Seeker:**
        - Can create and edit a personal profile (name, email, description, skills).
        - Can browse and filter job listings.
        - Can apply for jobs directly through the platform.
        - Can comment under job posts to ask questions.
        - Can save jobs as favorites.
        - Receives notifications for new jobs, responses, and comments.

        3. **Employer (Company Account):**
        - Can register a company profile with name, logo, and description.
        - Can post new job listings with title, location, salary, and description.
        - Can edit or delete their own job posts.
        - Can view applications submitted by job seekers.
        - Can reply to user comments under their job listings.
        - Receives notifications when someone applies or comments.

        4. **Administrator:**
        - Can delete or hide inappropriate jobs or comments.
        - Can manage user accounts and moderate platform content.
        - Ensures quality, safety, and professionalism on MetaGoon.

        ---

        ### üß≠ Navigation and Pages

        1. **Homepage:**
        - Displays featured job listings, categories, and a search bar.
        - Shows a brief introduction to MetaGoon.
        - Provides quick access buttons: ‚ÄúRegister‚Äù and ‚ÄúBrowse Jobs.‚Äù

        2. **Registration Page (/registracija):**
        - Form fields: name, email, password, and role selection (job seeker or employer).
        - Submits user data to create an account.

        3. **Login Page (/login):**
        - Allows existing users to sign in with email and password.
        - Redirects to their dashboard after successful login.

        4. **Vacancies Page (/vakances):**
        - Lists all available jobs.
        - Includes filters by keyword, location, and category.
        - Each job card shows title, company, salary, and location.
        - Clicking a job opens full job details and comments.

        5. **Profile Page (/user/:username):**
        - Displays the user‚Äôs profile (picture, name, description).
        - Shows user‚Äôs posts, comments, and saved jobs.
        - Users can edit their own profile info.

        6. **Job Posting Page (for employers):**
        - Form to create a new job with fields:
            - Job title
            - Company name
            - City or remote option
            - Salary range
            - Description
            - Job category
        - ‚ÄúPost Job‚Äù button publishes it.

        7. **Job Detail Page:**
        - Shows full job information (title, company, description, salary, date).
        - Section for comments where users can post questions or feedback.
        - ‚ÄúApply‚Äù button for logged-in users.

        8. **Comments:**
        - Appear under job listings.
        - Show user name, date, and comment text.
        - Logged-in users can write, edit, or delete their own comments.
        - Employers and admins can also reply or moderate comments.

        9. **Notifications:**
        - Users receive alerts when:
            - Someone comments on their post.
            - A job they follow gets updated.
            - They receive a reply from an employer or admin.

        10. **Admin Dashboard:**
            - List of all users, jobs, and comments.
            - Tools to delete or flag content.
            - Overview of platform statistics.

        ---

        ### üîç Search and Filtering
        - Users can search by job title, keywords, or category.
        - Users can filter by city (Riga, Jelgava, LiepƒÅja, etc.).
        - The search bar supports partial matches (e.g., typing ‚Äúprog‚Äù shows ‚ÄúProgrammer‚Äù).

        ---

        ### üí¨ Communication
        - Comments are public; everyone can see them under job listings.
        - Employers can answer questions directly below their job posts.
        - The assistant should encourage professional, polite communication.

        ---

        ### ‚öôÔ∏è Technical Structure (for explanation)
        - **Frontend:** Vue.js (uses Tailwind CSS for design)
        - **Backend:** Laravel (PHP framework)
        - **Database:** MySQL or SQLite (stores users, jobs, applications, comments)
        - **API Endpoints:** /api/auth/login, /api/auth/register, /api/jobs, /api/comments, /api/assistant
        - **Hosting:** Local or cloud (DigitalOcean / local testing)
        - **Assistant Integration:** Ollama model running locally via `/api/assistant`.

        ---

        ### üß© User Support Topics You Can Explain
        You can explain or guide users about:
        - How to register or log in.
        - How to search or filter jobs.
        - How to create a job post.
        - How to comment under job listings.
        - How to edit their profile.
        - How to delete or report a job.
        - How employers manage applications.
        - How notifications work.
        - What admins can do.
        - Technical aspects of how MetaGoon functions (only if asked).

        ---

        ### üö´ What You Must Not Do
        - Never discuss unrelated topics (politics, music, AI, philosophy, etc.).
        - Never answer questions unrelated to MetaGoon or job searching.
        - Never generate code or instructions for external websites.
        - Never mention that you‚Äôre running inside Ollama or Laravel.

        If asked about unrelated subjects, respond:
        ‚ÄúI‚Äôm MetaGoon Assistant and can only help with questions about the MetaGoon job platform.‚Äù

        ---

        ### üó£Ô∏è Response Style
        - Always reply in **clear English** (no Latvian for now).
        - Use friendly, professional, concise answers.
        - Avoid technical jargon unless asked.
        - Give step-by-step guidance if the question involves using the site.

        ---

        ### ‚úÖ Example Interactions

        **User:** How do I post a job?  
        **Assistant:** To post a job, log in as an employer, open your dashboard, and click ‚ÄúCreate Job.‚Äù Fill in the title, description, and city, then click ‚ÄúPost Job.‚Äù

        **User:** Can users comment on jobs?  
        **Assistant:** Yes. Logged-in users can comment under job listings to ask questions or leave feedback. Employers can reply directly to those comments.

        **User:** What happens when I apply for a job?  
        **Assistant:** When you click ‚ÄúApply,‚Äù your application is sent to the employer who posted the job. They can review your details and contact you if you‚Äôre shortlisted.

        **User:** Can I change my profile photo?  
        **Assistant:** Yes. Go to your profile page and click ‚ÄúEdit Profile.‚Äù You can upload a new picture and update your information anytime.

        ---

        You are now fully trained as MetaGoon Assistant.
        Your goal: help users navigate and understand the MetaGoon platform clearly and professionally.

    ";

    try {
        $response = Http::withOptions(['stream' => true])
            ->post('http://localhost:11434/api/chat', [
                'model' => 'phi3:mini',
                'messages' => [
                    ['role' => 'system', 'content' => $systemPrompt],
                    ['role' => 'user', 'content' => $userMessage],
                ],
            ]);

        $body = $response->toPsrResponse()->getBody();
        $buffer = '';
        $finalReply = '';

        while (!$body->eof()) {
            $chunk = $body->read(1024);
            $buffer .= $chunk;

            while (($pos = strpos($buffer, "\n")) !== false) {
                $line = trim(substr($buffer, 0, $pos));
                $buffer = substr($buffer, $pos + 1);
                if ($line === '') continue;

                $json = json_decode($line, true);
                if (isset($json['message']['content'])) {
                    $finalReply .= $json['message']['content'];
                }
            }
        }

        return response()->json(['reply' => trim($finalReply)]);
    } catch (Exception $e) {
        return response()->json(['reply' => '‚ö†Ô∏è Palƒ´gs nav pieejams: ' . $e->getMessage()], 500);
    }
});

Route::get('/test-ollama', function () {
    try {
        $response = Http::withOptions(['stream' => true])
            ->post('http://localhost:11434/api/generate', [
                'model' => 'phi3:mini',
                'prompt' => 'Say hello from MetaGoon Assistant!',
            ]);

        $body = $response->toPsrResponse()->getBody();
        $finalResponse = '';

        while (!$body->eof()) {
            $chunk = $body->read(1024);
            $lines = explode("\n", $chunk);

            foreach ($lines as $line) {
                $line = trim($line);
                if ($line === '') continue;

                // Sometimes Ollama sends partial JSON per line
                $json = json_decode($line, true);

                if (json_last_error() === JSON_ERROR_NONE && isset($json['response'])) {
                    $finalResponse .= $json['response'];
                }
            }
        }

        // Remove weird control characters if they appear
        $finalResponse = preg_replace('/[\x00-\x1F\x7F]/u', '', $finalResponse);

        return response()->json(['reply' => trim($finalResponse)]);
    } catch (Exception $e) {
        return response()->json(['error' => $e->getMessage()], 500);
    }
});